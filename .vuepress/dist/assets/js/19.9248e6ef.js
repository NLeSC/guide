(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{221:function(e,t,r){"use strict";r.r(t);var n=r(0),o=Object(n.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"python"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#python"}},[e._v("#")]),e._v(" Python")]),e._v(" "),r("p",[e._v('Python is the "dynamic language of choice" of the Netherlands eScience Center.')]),e._v(" "),r("h2",{attrs:{id:"project-setup"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#project-setup"}},[e._v("#")]),e._v(" Project setup")]),e._v(" "),r("p",[e._v("When starting a new Python project, consider using our "),r("a",{attrs:{href:"https://github.com/NLeSC/python-template",target:"_blank",rel:"noopener noreferrer"}},[e._v("Python template"),r("OutboundLink")],1),e._v(". This template provides a basic project structure, so you can spend less time setting up and configuring your new Python packages, and comply with the software guide right from the start.")]),e._v(" "),r("h2",{attrs:{id:"python-versions"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#python-versions"}},[e._v("#")]),e._v(" Python versions")]),e._v(" "),r("p",[e._v("Currently, there are two Python versions: 2 and 3.\n"),r("a",{attrs:{href:"https://wiki.python.org/moin/Python2orPython3",target:"_blank",rel:"noopener noreferrer"}},[e._v("Should I use Python 2 or Python 3 for my development activity?"),r("OutboundLink")],1),e._v("\nGenerally, Python 2.x is legacy, Python 3.x is the present and future of the language. However, not all Python libraries are compatible with Python 3.")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://pythonhosted.org/six/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Six"),r("OutboundLink")],1),e._v(": Python 2 and 3 Compatibility Library")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://docs.python.org/2/library/2to3.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("2to3"),r("OutboundLink")],1),e._v(": Automated Python 2 to 3 code translation")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/mitsuhiko/python-modernize",target:"_blank",rel:"noopener noreferrer"}},[e._v("python-modernize"),r("OutboundLink")],1),e._v(": wrapper around 2to3")])]),e._v(" "),r("p",[e._v("The philosophy of Python is summarized in the "),r("a",{attrs:{href:"https://www.python.org/dev/peps/pep-0020/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Zen of Python"),r("OutboundLink")],1),e._v(". In Python, this text can be retrieved with the "),r("code",[e._v("import this")]),e._v(" command.")]),e._v(" "),r("h2",{attrs:{id:"recommended-sources-of-information"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#recommended-sources-of-information"}},[e._v("#")]),e._v(" Recommended sources of information")]),e._v(" "),r("ul",[r("li",[e._v("A good way to learn Python is by doing it the hard way at http://learnpythonthehardway.org/")]),e._v(" "),r("li",[e._v("Introduction to python for data science: http://skillsmatter.com/podcast/java-jee/introducing-python-for-data-science")]),e._v(" "),r("li",[r("a",{attrs:{href:"http://ianozsvald.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Blog"),r("OutboundLink")],1),e._v(" by Ian Ozsvald, mostly on high performance python.")]),e._v(" "),r("li",[r("a",{attrs:{href:"http://planetpython.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("Planet Python"),r("OutboundLink")],1)]),e._v(" "),r("li",[e._v("Using "),r("a",{attrs:{href:"https://www.pylint.org",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("pylint")]),r("OutboundLink")],1),e._v(" and "),r("a",{attrs:{href:"https://github.com/google/yapf",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("yapf")]),r("OutboundLink")],1),e._v(" while learning Python is an easy way to get familiar with best practices and commonly used coding styles")])]),e._v(" "),r("h2",{attrs:{id:"dependencies-and-package-management"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dependencies-and-package-management"}},[e._v("#")]),e._v(" Dependencies and package management")]),e._v(" "),r("p",[e._v("Use "),r("code",[e._v("pip")]),e._v(" or "),r("code",[e._v("conda")]),e._v(" (note that pip and conda can be used side by side, see also "),r("a",{attrs:{href:"http://stackoverflow.com/questions/20994716/what-is-the-difference-between-pip-and-conda",target:"_blank",rel:"noopener noreferrer"}},[e._v("what is the difference between pip and conda?"),r("OutboundLink")],1),e._v(").")]),e._v(" "),r("p",[e._v("If you are planning on distributing your code at a later stage, be aware that your choice of package management may affect your packaging process. See "),r("a",{attrs:{href:"#building-and-packaging-code"}},[e._v("Building and packaging")]),e._v(" for more info.")]),e._v(" "),r("h3",{attrs:{id:"pip-virtualenv"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#pip-virtualenv"}},[e._v("#")]),e._v(" Pip + virtualenv")]),e._v(" "),r("p",[e._v("Create isolated Python environments with "),r("a",{attrs:{href:"https://virtualenv.pypa.io/en/latest/",target:"_blank",rel:"noopener noreferrer"}},[e._v("virtualenv"),r("OutboundLink")],1),e._v(". Very much recommended for all Python projects since it:")]),e._v(" "),r("ul",[r("li",[e._v("installs Python modules when you are not root,")]),e._v(" "),r("li",[e._v("contains all Python dependencies so the environment keeps working after an upgrade, and")]),e._v(" "),r("li",[e._v("lets you select the Python version per environment, so you can test code compatibility between Python 2.x and 3.x.")])]),e._v(" "),r("p",[e._v("To manage multiple virtualenv environments and reference them only by name, use "),r("a",{attrs:{href:"https://virtualenvwrapper.readthedocs.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("virtualenvwrapper"),r("OutboundLink")],1),e._v(". To create a new environment, run "),r("code",[e._v("mkvirtualenv environment_name")]),e._v(", to start using it, run "),r("code",[e._v("workon environment_name")]),e._v(" and to stop working with it, run "),r("code",[e._v("deactivate")]),e._v(".")]),e._v(" "),r("p",[e._v("If you are using Python 3 only, you can also make use of the standard library "),r("a",{attrs:{href:"https://docs.python.org/3/library/venv.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("venv"),r("OutboundLink")],1),e._v(" module. Creating a virtual environment with it is as easy as running "),r("code",[e._v("python3 -m venv /path/to/environment")]),e._v(". Run "),r("code",[e._v(". /path/to/environment/bin/activate")]),e._v(" to start using it and "),r("code",[e._v("deactivate")]),e._v(" to deactivate.")]),e._v(" "),r("p",[e._v("With virtualenv and venv, pip is used to install all dependencies. An increasing number of packages are using "),r("a",{attrs:{href:"http://pythonwheels.com",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("wheel")]),r("OutboundLink")],1),e._v(", so pip downloads and installs them as binaries. This means they have no build dependencies and are much faster to install. If the installation of a package fails because of its native extensions or system library dependencies and you are not root, you have to revert to Conda (see below).")]),e._v(" "),r("p",[e._v("To keep a log of the packages used by your package, run "),r("code",[e._v("pip freeze > requirements.txt")]),e._v(" in the root of your package. If some of the packages listed in "),r("code",[e._v("requirements.txt")]),e._v(" are needed during testing only, use an editor to move those lines to "),r("code",[e._v("test_requirements.txt")]),e._v(". Now your package can be installed with")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("pip install -r requirements.txt\npip install -e .\n")])])]),r("p",[e._v("The "),r("code",[e._v("-e")]),e._v(" flag will install your package in editable mode, i.e. it will create a symlink to your package in the installation location  instead of copying the package. This is convenient when developing, because any changes you make to the source code will immediately be available for use in the installed version.")]),e._v(" "),r("h3",{attrs:{id:"conda"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#conda"}},[e._v("#")]),e._v(" Conda")]),e._v(" "),r("p",[r("a",{attrs:{href:"http://conda.pydata.org/docs/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Conda"),r("OutboundLink")],1),e._v(" can be used instead of virtualenv and pip. It easily installs binary dependencies, like Python itself or system libraries. Installation of packages that are not using "),r("code",[e._v("wheel")]),e._v(" but have a lot of native code is much faster than "),r("code",[e._v("pip")]),e._v(" because Conda does not compile the package, it only downloads compiled packages. The disadvantage of Conda is that the package needs to have a Conda build recipe. Many Conda build recipes already exist, but they are less common than the "),r("code",[e._v("setup.py")]),e._v(" that generally all Python packages have.")]),e._v(" "),r("p",[e._v("There are two main distributions of Conda: "),r("a",{attrs:{href:"http://continuum.io/downloads",target:"_blank",rel:"noopener noreferrer"}},[e._v("Anaconda"),r("OutboundLink")],1),e._v(" and "),r("a",{attrs:{href:"http://conda.pydata.org/miniconda.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Miniconda"),r("OutboundLink")],1),e._v(". Anaconda is large and contains a lot of common packages, like numpy and matplotlib, whereas Miniconda is very lightweight and only contains Python. If you need more, the "),r("code",[e._v("conda")]),e._v(" command acts as a package manager for Python packages.")]),e._v(" "),r("p",[e._v("Use "),r("code",[e._v("conda install")]),e._v(" to install new packages and "),r("code",[e._v("conda update")]),e._v(" to keep your system up to date. The "),r("code",[e._v("conda")]),e._v(" command can also be used to create virtual environments.")]),e._v(" "),r("p",[e._v("For environments where you do not have admin rights (e.g. DAS-5) either Anaconda or Miniconda is highly recommended, since the install is very straightforward. The installation of packages through Conda seems very robust. If you want to add packages to the (Ana)conda repositories, please check "),r("a",{attrs:{href:"http://conda.pydata.org/docs/build_tutorials.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Build using conda"),r("OutboundLink")],1),e._v(".\nA possible downside of Anaconda is the fact that this is offered by a commercial supplier, but we don't foresee any vendor lock-in issues.")]),e._v(" "),r("h2",{attrs:{id:"editors-and-ides"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#editors-and-ides"}},[e._v("#")]),e._v(" Editors and IDEs")]),e._v(" "),r("ul",[r("li",[e._v("Every major text editor supports Python, either natively or through plugins. At the Netherlands eScience Center, often used editors are "),r("a",{attrs:{href:"https://atom.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("atom"),r("OutboundLink")],1),e._v(", "),r("a",{attrs:{href:"https://www.sublimetext.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Sublime Text"),r("OutboundLink")],1),e._v(" and "),r("a",{attrs:{href:"https://realpython.com/blog/python/vim-and-python-a-match-made-in-heaven/",target:"_blank",rel:"noopener noreferrer"}},[e._v("vim"),r("OutboundLink")],1),e._v(".")]),e._v(" "),r("li",[r("a",{attrs:{href:"http://www.pydev.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("PyDev"),r("OutboundLink")],1),e._v(" is an open source IDE. The source code is available in the "),r("a",{attrs:{href:"https://github.com/fabioz/Pydev",target:"_blank",rel:"noopener noreferrer"}},[e._v("PyDev GitHub repository"),r("OutboundLink")],1),e._v(". It has debugging, unit testing, and reporting(code analysis, code coverage) support.")]),e._v(" "),r("li",[e._v("For those seeking an IDE, JetBrains "),r("a",{attrs:{href:"https://www.jetbrains.com/pycharm/",target:"_blank",rel:"noopener noreferrer"}},[e._v("PyCharm"),r("OutboundLink")],1),e._v(" is the Python IDE of choice. "),r("a",{attrs:{href:"https://www.jetbrains.com/pycharm",target:"_blank",rel:"noopener noreferrer"}},[e._v("PyCharm Community Edition"),r("OutboundLink")],1),e._v("  is open source. The source code is available in the "),r("a",{attrs:{href:"https://github.com/JetBrains/intellij-community/tree/master/python",target:"_blank",rel:"noopener noreferrer"}},[e._v("python folder of the IntelliJ repository"),r("OutboundLink")],1),e._v(". It has visual debugger, unit testing and code coverage support, profiler. JetBrains provides a "),r("a",{attrs:{href:"https://www.jetbrains.com/pycharm/features/tools.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("list of all tools in PyCharm"),r("OutboundLink")],1),e._v(".")])]),e._v(" "),r("h2",{attrs:{id:"coding-style-conventions"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#coding-style-conventions"}},[e._v("#")]),e._v(" Coding style conventions")]),e._v(" "),r("p",[e._v("The style guide for Python code is "),r("a",{attrs:{href:"http://www.python.org/dev/peps/pep-0008/",target:"_blank",rel:"noopener noreferrer"}},[e._v("PEP8"),r("OutboundLink")],1),e._v(" and for docstrings it is "),r("a",{attrs:{href:"https://www.python.org/dev/peps/pep-0257/",target:"_blank",rel:"noopener noreferrer"}},[e._v("PEP257"),r("OutboundLink")],1),e._v(". We highly recommend following these conventions, as they are widely agreed upon to improve readability. To make following them significantly easier, we recommend using a linter.")]),e._v(" "),r("p",[e._v("Many linters exists for Python, "),r("a",{attrs:{href:"https://github.com/landscapeio/prospector",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("prospector")]),r("OutboundLink")],1),e._v(" is a tool for running a suite of linters, it supports, among others:")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/PyCQA/pycodestyle",target:"_blank",rel:"noopener noreferrer"}},[e._v("pycodestyle"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/PyCQA/pydocstyle",target:"_blank",rel:"noopener noreferrer"}},[e._v("pydocstyle"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://pypi.python.org/pypi/pyflakes",target:"_blank",rel:"noopener noreferrer"}},[e._v("pyflakes"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://www.pylint.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("pylint"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/PyCQA/mccabe",target:"_blank",rel:"noopener noreferrer"}},[e._v("mccabe"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/regebro/pyroma",target:"_blank",rel:"noopener noreferrer"}},[e._v("pyroma"),r("OutboundLink")],1)])]),e._v(" "),r("p",[e._v("Make sure to set strictness to "),r("code",[e._v("veryhigh")]),e._v(" for best results. "),r("code",[e._v("prospector")]),e._v(" has its own configuration file, like the "),r("a",{attrs:{href:"https://github.com/NLeSC/python-template/blob/master/%7B%7Bcookiecutter.project_slug%7D%7D/.prospector.yml",target:"_blank",rel:"noopener noreferrer"}},[e._v(".prospector.yml default in the Python template"),r("OutboundLink")],1),e._v(", but also supports configuration files for any of the linters that it runs. Most of the above tools can be integrated in text editors and IDEs for convenience.")]),e._v(" "),r("p",[e._v("Autoformatting tools like "),r("a",{attrs:{href:"https://github.com/google/yapf",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("yapf")]),r("OutboundLink")],1),e._v(" and "),r("a",{attrs:{href:"https://black.readthedocs.io/en/stable/index.html",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("black")]),r("OutboundLink")],1),e._v(" can automatically format code for optimal readability. "),r("code",[e._v("yapf")]),e._v(" is configurable to suit your (team's) preferences, whereas "),r("code",[e._v("black")]),e._v(" enforces the style chosen by the "),r("code",[e._v("black")]),e._v(" authors. The "),r("a",{attrs:{href:"http://timothycrosley.github.io/isort/",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("isort")]),r("OutboundLink")],1),e._v(" package automatically formats and groups all imports in a standard, readable way.")]),e._v(" "),r("h2",{attrs:{id:"building-and-packaging-code"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#building-and-packaging-code"}},[e._v("#")]),e._v(" Building and packaging code")]),e._v(" "),r("p",[e._v("To create an installable Python package, create a file "),r("code",[e._v("setup.py")]),e._v(" and use the "),r("a",{attrs:{href:"https://setuptools.readthedocs.io",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("setuptools")]),r("OutboundLink")],1),e._v(" module. Make sure you only import standard library packages in "),r("code",[e._v("setup.py")]),e._v(", directly or through importing other modules of your package, or your package will fail to install on systems that do not have the required dependencies pre-installed. Set up continuous integration to test your installation script. Use "),r("code",[e._v("pyroma")]),e._v(" (can be run as part of "),r("code",[e._v("prospector")]),e._v(") as a linter for your installation script.")]),e._v(" "),r("p",[e._v("For packaging your code, you can either use "),r("code",[e._v("pip")]),e._v(" or "),r("code",[e._v("conda")]),e._v(". Neither of them is "),r("a",{attrs:{href:"https://jakevdp.github.io/blog/2016/08/25/conda-myths-and-misconceptions/",target:"_blank",rel:"noopener noreferrer"}},[e._v("better than the other"),r("OutboundLink")],1),e._v(" -- they are different; use the one which is more suitable for your project. "),r("code",[e._v("pip")]),e._v(" may be more suitable for distributing pure python packages, and it provides some support for binary dependencies using "),r("a",{attrs:{href:"http://pythonwheels.com",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("wheels")]),r("OutboundLink")],1),e._v(". "),r("code",[e._v("conda")]),e._v(" may be more suitable when you have external dependencies which cannot be packaged in a wheel.")]),e._v(" "),r("ul",[r("li",[e._v("Use "),r("a",{attrs:{href:"https://github.com/pypa/twine",target:"_blank",rel:"noopener noreferrer"}},[e._v("twine"),r("OutboundLink")],1),e._v(" to upload your package to the "),r("a",{attrs:{href:"https://pypi.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("Python Package Index (PyPI)"),r("OutboundLink")],1),e._v(" (so it can be installed with pip) ("),r("a",{attrs:{href:"http://blog.securem.eu/tips%20and%20tricks/2016/02/29/creating-and-publishing-a-python-module/",target:"_blank",rel:"noopener noreferrer"}},[e._v("tutorial"),r("OutboundLink")],1),e._v(")\n"),r("ul",[r("li",[e._v("Packages should be uploaded to PyPI using "),r("a",{attrs:{href:"https://pypi.org/account/register",target:"_blank",rel:"noopener noreferrer"}},[e._v("your own account"),r("OutboundLink")],1)]),e._v(" "),r("li",[e._v("For packages co-owned by the Netherlands eScience Center it is advised to make the PyPI "),r("code",[e._v("nlesc")]),e._v(" account an collaborator with the owner role. This will give the center a way to perform emergency maintenance of the package if the original uploader is unable to.")]),e._v(" "),r("li",[e._v("When distributing code through PyPI, non-python files (such as "),r("code",[e._v("requirements.txt")]),e._v(") will not be packaged automatically, you need to "),r("a",{attrs:{href:"https://stackoverflow.com/questions/1612733/including-non-python-files-with-setup-py",target:"_blank",rel:"noopener noreferrer"}},[e._v("add them to"),r("OutboundLink")],1),e._v(" a "),r("code",[e._v("MANIFEST.in")]),e._v(" file.")]),e._v(" "),r("li",[e._v("To test whether your distribution will work correctly before uploading to PyPI, you can run "),r("code",[e._v("python setup.py sdist")]),e._v(" in the root of your repository. Then try installing your package with "),r("code",[e._v("pip install dist/<your_package>tar.gz.")])])])]),e._v(" "),r("li",[r("a",{attrs:{href:"http://conda.pydata.org/docs/build_tutorials.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Build using conda"),r("OutboundLink")],1),e._v(" "),r("ul",[r("li",[e._v("If possible, add packages to "),r("a",{attrs:{href:"https://conda-forge.github.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("conda-forge"),r("OutboundLink")],1),e._v(". Use BioConda or custom channels (hosted on GitHub) as alternatives if need be.")])])]),e._v(" "),r("li",[r("a",{attrs:{href:"http://pythonwheels.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Python wheels"),r("OutboundLink")],1),e._v(" are the new standard for "),r("a",{attrs:{href:"https://packaging.python.org/distributing/#wheels",target:"_blank",rel:"noopener noreferrer"}},[e._v("distributing"),r("OutboundLink")],1),e._v(" Python packages. For pure python code, without C extensions, use "),r("a",{attrs:{href:"https://packaging.python.org/distributing/#pure-python-wheels",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("bdist_wheel")]),r("OutboundLink")],1),e._v(" with a Python 2 and Python 3 setup, or use "),r("a",{attrs:{href:"https://packaging.python.org/distributing/#universal-wheels",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("bdist_wheel --universal")]),r("OutboundLink")],1),e._v(" if the code is compatible with both Python 2 and 3. If C extensions are used, each OS needs to have its own wheel. The "),r("a",{attrs:{href:"https://github.com/pypa/manylinux",target:"_blank",rel:"noopener noreferrer"}},[e._v("manylinux"),r("OutboundLink")],1),e._v(" docker images can be used for building wheels compatible with multiple Linux distributions. See "),r("a",{attrs:{href:"https://github.com/pypa/python-manylinux-demo",target:"_blank",rel:"noopener noreferrer"}},[e._v("the manylinux demo"),r("OutboundLink")],1),e._v(" for an example. Wheel building can be automated using Travis (for pure python, Linux and OS X) and Appveyor (for Windows).")])]),e._v(" "),r("h2",{attrs:{id:"testing"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#testing"}},[e._v("#")]),e._v(" Testing")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"http://pytest.org/latest/",target:"_blank",rel:"noopener noreferrer"}},[e._v("pytest"),r("OutboundLink")],1),e._v(" is a full featured Python\ntesting tool. You can use it with "),r("code",[e._v("unittest")]),e._v(".\n"),r("a",{attrs:{href:"http://pythontesting.net/framework/pytest/pytest-introduction/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pytest intro"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"http://www.drdobbs.com/testing/using-mocks-in-python/240168251",target:"_blank",rel:"noopener noreferrer"}},[e._v("Using mocks in Python"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://docs.python.org/3/library/unittest.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("unittest"),r("OutboundLink")],1),e._v(" is a\nframework available in Python Standard Library.\n"),r("a",{attrs:{href:"http://www.drdobbs.com/testing/unit-testing-with-python/240165163",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dr.Dobb's on Unit Testing with Python"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://docs.python.org/3/library/doctest.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("doctest"),r("OutboundLink")],1),e._v(" searches for pieces of text that look like interactive Python sessions, and then executes those sessions to verify that they work exactly as shown. Always use this if you have example code in your documentation to make sure your examples actually work.")])]),e._v(" "),r("p",[e._v("Using "),r("code",[e._v("pytest")]),e._v(" is preferred over "),r("code",[e._v("unittest")]),e._v(", "),r("code",[e._v("pytest")]),e._v(" has a much more concise syntax and supports many useful features.")]),e._v(" "),r("p",[e._v("Please make sure the command "),r("code",[e._v("python setup.py test")]),e._v(" can be used to run your tests. When using "),r("code",[e._v("pytest")]),e._v(", this can be easily configured as described in the "),r("a",{attrs:{href:"https://docs.pytest.org/en/latest/goodpractices.html#integrating-with-setuptools-python-setup-py-test-pytest-runner",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("pytest")]),e._v(" documentation"),r("OutboundLink")],1),e._v(".")]),e._v(" "),r("h3",{attrs:{id:"code-coverage"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#code-coverage"}},[e._v("#")]),e._v(" Code coverage")]),e._v(" "),r("p",[e._v("When you have tests it is also a good to see which source code is exercised by the test suite.\n"),r("router-link",{attrs:{to:"/best_practices/testing.html#Code_Coverage"}},[e._v("Code coverage")]),e._v(" can be measured with the "),r("a",{attrs:{href:"https://coverage.readthedocs.io",target:"_blank",rel:"noopener noreferrer"}},[e._v("coverage"),r("OutboundLink")],1),e._v(" Python package.\nThe coverage package can also generate html reports which show which line was covered.\nMost test runners have have the coverage package integrated.")],1),e._v(" "),r("p",[e._v("The code coverage reports can be published online in code quality service or code coverage services.\nPreferred is to use one of the code quality service which also handles code coverage listed "),r("a",{attrs:{href:"#Code_quality_analysis_tools_and_services"}},[e._v("below")]),e._v(".\nIf this is not possible or does not fit then use one of the generic code coverage service list in the "),r("router-link",{attrs:{to:"/best_practices/testing.html#Code_coverage_services"}},[e._v("software guide")]),e._v(".")],1),e._v(" "),r("h2",{attrs:{id:"code-quality-analysis-tools-and-services"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#code-quality-analysis-tools-and-services"}},[e._v("#")]),e._v(" Code quality analysis tools and services")]),e._v(" "),r("p",[e._v("Code quality service is explained in the "),r("router-link",{attrs:{to:"/best_practices/code_quality.html#Software_quality_improvement_tools"}},[e._v("Generic software guide")]),e._v(".\nThere are multiple code quality services available for Python.\nThere is not a best one, below is a short list of services with their different strenghts.")],1),e._v(" "),r("h3",{attrs:{id:"codacy"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#codacy"}},[e._v("#")]),e._v(" "),r("a",{attrs:{href:"https://www.codacy.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("Codacy"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("Code quality and coverage grouped by file.\nCan setup goals to improve quality or coverage by file or category.\nFor example project see https://www.codacy.com/app/3D-e-Chem/kripodb/dashboard.\nNote that Codacy does not install your depencencies, which prevents it from correctly identifying import errors.")]),e._v(" "),r("h3",{attrs:{id:"scrutinizer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#scrutinizer"}},[e._v("#")]),e._v(" "),r("a",{attrs:{href:"https://scrutinizer-ci.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Scrutinizer"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("Code quality and coverage grouped by class and function.\nFor example project see https://scrutinizer-ci.com/g/NLeSC/eEcology-Annotation-WS/")]),e._v(" "),r("h3",{attrs:{id:"landscape"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#landscape"}},[e._v("#")]),e._v(" "),r("a",{attrs:{href:"https://landscape.io",target:"_blank",rel:"noopener noreferrer"}},[e._v("Landscape"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("Dedicated for Python code quality.\nCelery, Django and Flask specific behaviors.\nThe Landscape analysis tool called "),r("a",{attrs:{href:"https://github.com/landscapeio/prospector",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("prospector")]),r("OutboundLink")],1),e._v(" can be run locally.\nFor example project see https://landscape.io/github/NLeSC/MAGMa")]),e._v(" "),r("h2",{attrs:{id:"debugging-and-profiling"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#debugging-and-profiling"}},[e._v("#")]),e._v(" Debugging and profiling")]),e._v(" "),r("h3",{attrs:{id:"debugging"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#debugging"}},[e._v("#")]),e._v(" Debugging")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("Python has its own debugger called "),r("a",{attrs:{href:"https://docs.python.org/3/library/pdb.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("pdb"),r("OutboundLink")],1),e._v(". It is a part of the Python distribution.")])]),e._v(" "),r("li",[r("p",[r("a",{attrs:{href:"https://github.com/inducer/pudb",target:"_blank",rel:"noopener noreferrer"}},[e._v("pudb"),r("OutboundLink")],1),e._v(" is a console-based Python debugger which can easily be installed using pip.")])]),e._v(" "),r("li",[r("p",[e._v("If you are looking for IDE's with debugging capabilities, please check "),r("strong",[e._v("Editors and IDEs")]),e._v(" section.")])]),e._v(" "),r("li",[r("p",[e._v("If you are using Windows, "),r("a",{attrs:{href:"https://github.com/Microsoft/PTVS",target:"_blank",rel:"noopener noreferrer"}},[e._v("Python Tools for Visual Studio"),r("OutboundLink")],1),e._v(" adds Python support for Visual Studio.")])]),e._v(" "),r("li",[r("p",[e._v("If you would like to integrate "),r("a",{attrs:{href:"https://docs.python.org/3/library/pdb.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("pdb"),r("OutboundLink")],1),e._v(" with "),r("strong",[e._v("vim")]),e._v(" editor, you can use "),r("a",{attrs:{href:"https://sourceforge.net/projects/pyclewn",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pyclewn"),r("OutboundLink")],1),e._v(".")])]),e._v(" "),r("li",[r("p",[e._v("List of other available software can be found on the "),r("a",{attrs:{href:"https://wiki.python.org/moin/PythonDebuggingTools",target:"_blank",rel:"noopener noreferrer"}},[e._v("Python wiki page on debugging tools"),r("OutboundLink")],1),e._v(".")])]),e._v(" "),r("li",[r("p",[e._v("If you are looking for some tutorials to get started:")]),e._v(" "),r("ul",[r("li",[e._v("https://pymotw.com/2/pdb")]),e._v(" "),r("li",[e._v("https://github.com/spiside/pdb-tutorial")]),e._v(" "),r("li",[e._v("https://www.jetbrains.com/help/pycharm/2016.3/debugging.html")]),e._v(" "),r("li",[e._v("https://waterprogramming.wordpress.com/2015/09/10/debugging-in-python-using-pycharm/")]),e._v(" "),r("li",[e._v("http://www.pydev.org/manual_101_run.html")])])])]),e._v(" "),r("h3",{attrs:{id:"profiling"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#profiling"}},[e._v("#")]),e._v(" Profiling")]),e._v(" "),r("p",[e._v("There are a number of available profiling tools that are suitable for different situations.")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://docs.python.org/2/library/profile.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("cProfile"),r("OutboundLink")],1),e._v(" measures number of function calls and how much CPU time they take. The output can be further analyzed using the "),r("code",[e._v("pstats")]),e._v(" module.")]),e._v(" "),r("li",[e._v("For more fine-grained, line-by-line CPU time profiling, two modules can be used:\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/rkern/line_profiler",target:"_blank",rel:"noopener noreferrer"}},[e._v("line_profiler"),r("OutboundLink")],1),e._v(" provides a function decorator that measures the time spent on each line inside the function.")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/vpelletier/pprofile",target:"_blank",rel:"noopener noreferrer"}},[e._v("pprofile"),r("OutboundLink")],1),e._v(" is less intrusive; it simply times entire Python scripts line-by-line. It can give output in callgrind format, which allows you to study the statistics and call tree in "),r("code",[e._v("kcachegrind")]),e._v(" (often used for analyzing c(++) profiles from "),r("code",[e._v("valgrind")]),e._v(").")])])])]),e._v(" "),r("p",[e._v("More realistic profiling information can usually be obtained by using statistical or sampling profilers. The profilers listed below all create nice flame graphs.")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/nvdv/vprof",target:"_blank",rel:"noopener noreferrer"}},[e._v("vprof"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/uber/pyflame",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pyflame"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/nylas/nylas-perftools",target:"_blank",rel:"noopener noreferrer"}},[e._v("nylas-perftools"),r("OutboundLink")],1)])]),e._v(" "),r("h2",{attrs:{id:"logging"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#logging"}},[e._v("#")]),e._v(" Logging")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://docs.python.org/3/library/logging.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("logging"),r("OutboundLink")],1),e._v(" module is the most commonly used tool to track events in Python code.")]),e._v(" "),r("li",[e._v("Tutorials:\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://docs.python.org/3/howto/logging.html#logging-basic-tutorial",target:"_blank",rel:"noopener noreferrer"}},[e._v("Official Python Logging Tutorial"),r("OutboundLink")],1)]),e._v(" "),r("li",[e._v("http://docs.python-guide.org/en/latest/writing/logging")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://www.datadoghq.com/blog/python-logging-best-practices/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Python logging best practices"),r("OutboundLink")],1)])])])]),e._v(" "),r("h2",{attrs:{id:"writing-documentation"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#writing-documentation"}},[e._v("#")]),e._v(" Writing Documentation")]),e._v(" "),r("p",[e._v("Python uses "),r("strong",[e._v("Docstrings")]),e._v(" for function level documentation. You can read a detailed description of docstring usage in "),r("a",{attrs:{href:"https://www.python.org/dev/peps/pep-0257/",target:"_blank",rel:"noopener noreferrer"}},[e._v("PEP 257"),r("OutboundLink")],1),e._v(".\nThe default location to put HTML documentation is "),r("a",{attrs:{href:"https://readthedocs.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("Read the Docs"),r("OutboundLink")],1),e._v(". You can connect your account at Read the Docs to your GitHub account and let the HTML be generated automatically using Sphinx.")]),e._v(" "),r("h3",{attrs:{id:"autogenerating-the-documentation"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#autogenerating-the-documentation"}},[e._v("#")]),e._v(" Autogenerating the documentation")]),e._v(" "),r("p",[e._v("There are several tools that automatically generate documentation from docstrings. These are the most used:")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://docs.python.org/2/library/pydoc.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("pydoc"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"http://sphinx-doc.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("Sphinx"),r("OutboundLink")],1),e._v(" (uses reStructuredText as its markup language)\n"),r("ul",[r("li",[r("a",{attrs:{href:"http://www.sphinx-doc.org/en/master/usage/quickstart.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Sphinx quickstart"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"http://openalea.gforge.inria.fr/doc/openalea/doc/_build/html/source/sphinx/rest_syntax.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Restructured Text (reST) and Sphinx CheatSheet"),r("OutboundLink")],1)]),e._v(" "),r("li",[e._v("Instead of using reST, Sphinx can also generate documentation from the more readable "),r("a",{attrs:{href:"https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt",target:"_blank",rel:"noopener noreferrer"}},[e._v("NumPy style"),r("OutboundLink")],1),e._v(" or "),r("a",{attrs:{href:"https://google.github.io/styleguide/pyguide.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Google style"),r("OutboundLink")],1),e._v(" docstrings. The "),r("a",{attrs:{href:"http://sphinxcontrib-napoleon.readthedocs.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Napoleon extension"),r("OutboundLink")],1),e._v(" needs to be enabled.")])])])]),e._v(" "),r("p",[e._v("We recommend using Sphinx and Google documentation style. Sphinx can easily be "),r("a",{attrs:{href:"http://www.sphinx-doc.org/en/stable/setuptools.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("integrated with setuptools"),r("OutboundLink")],1),e._v(", so documentation can be built with in the command "),r("code",[e._v("python setup.py build_sphinx")]),e._v(".")]),e._v(" "),r("h2",{attrs:{id:"recommended-additional-packages-and-libraries"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#recommended-additional-packages-and-libraries"}},[e._v("#")]),e._v(" Recommended additional packages and libraries")]),e._v(" "),r("h3",{attrs:{id:"general-scientific"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#general-scientific"}},[e._v("#")]),e._v(" General scientific")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"http://www.numpy.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("NumPy"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://www.scipy.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("SciPy"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"http://pandas.pydata.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pandas"),r("OutboundLink")],1),e._v(" data analysis toolkit")]),e._v(" "),r("li",[r("a",{attrs:{href:"http://scikit-learn.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("scikit-learn"),r("OutboundLink")],1),e._v(": machine learning in Python")]),e._v(" "),r("li",[r("a",{attrs:{href:"http://cython.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Cython"),r("OutboundLink")],1),e._v(" speed up Python code by using C types and calling C functions")]),e._v(" "),r("li",[r("a",{attrs:{href:"http://dask.pydata.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("dask"),r("OutboundLink")],1),e._v(" larger than memory arrays and parallel execution")])]),e._v(" "),r("h3",{attrs:{id:"ipython-and-jupyter-notebooks-aka-ipython-notebooks"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ipython-and-jupyter-notebooks-aka-ipython-notebooks"}},[e._v("#")]),e._v(" IPython and Jupyter notebooks (aka IPython notebooks)")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://ipython.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("IPython"),r("OutboundLink")],1),e._v(" is an interactive Python interpreter -- very much the same as the standard Python interactive interpreter, but with some "),r("a",{attrs:{href:"http://ipython.readthedocs.io/en/stable/interactive/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("extra features"),r("OutboundLink")],1),e._v(" (tab completion, shell commands, in-line help, etc).")]),e._v(" "),r("p",[r("a",{attrs:{href:"http://jupyter.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Jupyter"),r("OutboundLink")],1),e._v(" notebooks (formerly know as IPython notebooks) are browser based interactive Python enviroments. It incorporates the same features as the IPython console, plus some extras like in-line plotting.  "),r("a",{attrs:{href:"https://nbviewer.jupyter.org/github/ipython/ipython/blob/4.0.x/examples/IPython%20Kernel/Index.ipynb",target:"_blank",rel:"noopener noreferrer"}},[e._v("Look at some examples"),r("OutboundLink")],1),e._v(" to find out more. Within a notebook you can alternate code with Markdown comments (and even LaTeX), which is great for reproducible research.\n"),r("a",{attrs:{href:"https://github.com/ipython-contrib/jupyter_contrib_nbextensions",target:"_blank",rel:"noopener noreferrer"}},[e._v("Notebook extensions"),r("OutboundLink")],1),e._v(" adds extra functionalities to notebooks.\n"),r("a",{attrs:{href:"https://github.com/jupyterlab/jupyterlab",target:"_blank",rel:"noopener noreferrer"}},[e._v("JupyterLab"),r("OutboundLink")],1),e._v(" is a web-based environment with a lot of improvements and integrated tools. JupyterLab is still under "),r("strong",[e._v("development")]),e._v(" and may not be suitable if you need a stable tool.")]),e._v(" "),r("h3",{attrs:{id:"visualization"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#visualization"}},[e._v("#")]),e._v(" Visualization")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"http://matplotlib.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("Matplotlib"),r("OutboundLink")],1),e._v(" has been the standard in scientific visualization. It supports quick-and-dirty plotting through the "),r("code",[e._v("pyplot")]),e._v(" submodule. Its object oriented interface can be somewhat arcane, but is highly customizable and runs natively on many platforms, making it compatible with all major OSes and environments. It supports most sources of data, including native Python objects, Numpy and Pandas.\n"),r("ul",[r("li",[r("a",{attrs:{href:"http://stanford.edu/~mwaskom/software/seaborn/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Seaborn"),r("OutboundLink")],1),e._v(" is a Python visualisation library based on Matplotlib and aimed towards statistical analysis. It supports numpy, pandas, scipy and statmodels.")])])]),e._v(" "),r("li",[e._v("Web-based:\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/bokeh/bokeh",target:"_blank",rel:"noopener noreferrer"}},[e._v("Bokeh"),r("OutboundLink")],1),e._v(" is Interactive Web Plotting for Python.")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://plot.ly/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Plotly"),r("OutboundLink")],1),e._v(" is another platform for interactive plotting through a web browser, including in Jupyter notebooks.")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/ellisonbg/altair",target:"_blank",rel:"noopener noreferrer"}},[e._v("altair"),r("OutboundLink")],1),e._v(" is a "),r("em",[e._v("grammar of graphics")]),e._v(" style declarative statistical visualization library. It does not render visualizations itself, but rather outputs Vega-Lite JSON data. This can lead to a simplified workflow.")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/yhat/ggpy",target:"_blank",rel:"noopener noreferrer"}},[e._v("ggplot"),r("OutboundLink")],1),e._v(" is a plotting library imported from R.")])])])]),e._v(" "),r("h3",{attrs:{id:"database-interface"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#database-interface"}},[e._v("#")]),e._v(" Database Interface")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"http://initd.org/psycopg/",target:"_blank",rel:"noopener noreferrer"}},[e._v("psycopg"),r("OutboundLink")],1),e._v(" is an "),r("a",{attrs:{href:"http://www.postgresql.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("PostgreSQL"),r("OutboundLink")],1),e._v(" adapter")]),e._v(" "),r("li",[r("a",{attrs:{href:"http://cx-oracle.sourceforge.net",target:"_blank",rel:"noopener noreferrer"}},[e._v("cx_Oracle"),r("OutboundLink")],1),e._v(" enables access to "),r("a",{attrs:{href:"https://www.oracle.com/database/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Oracle"),r("OutboundLink")],1),e._v(" databases")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://www.monetdb.org/Documentation/Manuals/SQLreference/Programming/Python",target:"_blank",rel:"noopener noreferrer"}},[e._v("monetdb.sql"),r("OutboundLink")],1),e._v("\nis "),r("a",{attrs:{href:"https://www.monetdb.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("monetdb"),r("OutboundLink")],1),e._v(" Python client")]),e._v(" "),r("li",[r("a",{attrs:{href:"http://api.mongodb.org/python/current/#",target:"_blank",rel:"noopener noreferrer"}},[e._v("pymongo"),r("OutboundLink")],1),e._v(" allows for work with "),r("a",{attrs:{href:"http://www.mongodb.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("MongoDB"),r("OutboundLink")],1),e._v(" database")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://code.google.com/p/py-leveldb/",target:"_blank",rel:"noopener noreferrer"}},[e._v("py-leveldb"),r("OutboundLink")],1),e._v(" are thread-safe Python bindings for "),r("a",{attrs:{href:"https://github.com/google/leveldb",target:"_blank",rel:"noopener noreferrer"}},[e._v("LevelDb"),r("OutboundLink")],1)])]),e._v(" "),r("h3",{attrs:{id:"parallelisation"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#parallelisation"}},[e._v("#")]),e._v(" Parallelisation")]),e._v(" "),r("p",[e._v("CPython (the official and mainstream Python implementation) is not built for parallel processing due to the "),r("a",{attrs:{href:"https://wiki.python.org/moin/GlobalInterpreterLock",target:"_blank",rel:"noopener noreferrer"}},[e._v("global interpreter lock"),r("OutboundLink")],1),e._v(". Note that the GIL only applies to actual Python code, so compiled modules like e.g. "),r("code",[e._v("numpy")]),e._v(" do not suffer from it.")]),e._v(" "),r("p",[e._v("Having said that, there are many ways to run Python code in parallel:")]),e._v(" "),r("ul",[r("li",[e._v("The "),r("a",{attrs:{href:"https://docs.python.org/3/library/multiprocessing.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("multiprocessing"),r("OutboundLink")],1),e._v(" module is the standard way to do parallel executions in one or multiple machines, it circumvents the GIL by creating multiple Python processess.")]),e._v(" "),r("li",[e._v("A much simpler alternative in Python 3 is the "),r("a",{attrs:{href:"https://docs.python.org/3/library/concurrent.futures.html",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("concurrent.futures")]),r("OutboundLink")],1),e._v(" module.")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://ipython.org/ipython-doc/3/parallel/",target:"_blank",rel:"noopener noreferrer"}},[e._v("IPython / Jupyter notebooks have built-in parallel and distributed computing capabilities"),r("OutboundLink")],1)]),e._v(" "),r("li",[e._v("Many modules have parallel capabilities or can be compiled to have them.")]),e._v(" "),r("li",[e._v("At the eScience Center, we have developed the "),r("a",{attrs:{href:"http://nlesc.github.io/noodles/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Noodles package"),r("OutboundLink")],1),e._v(" for creating computational workflows and automatically parallelizing it by dispatching independent subtasks to parallel and/or distributed systems.")])]),e._v(" "),r("h3",{attrs:{id:"web-frameworks"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#web-frameworks"}},[e._v("#")]),e._v(" Web Frameworks")]),e._v(" "),r("p",[e._v("There are a lot web frameworks for Python that are very easy to run.")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"http://flask.pocoo.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("flask"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"http://www.cherrypy.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("cherrypy"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://www.djangoproject.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Django"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"http://bottlepy.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("bottle"),r("OutboundLink")],1),e._v(" (similar to flask, but a bit more light-weight for a JSON-REST service)")])]),e._v(" "),r("p",[e._v("We recommend "),r("code",[e._v("flask")]),e._v(".")]),e._v(" "),r("h3",{attrs:{id:"nlp-text-mining"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#nlp-text-mining"}},[e._v("#")]),e._v(" NLP/text mining")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"http://www.nltk.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("nltk"),r("OutboundLink")],1),e._v(" Natural Language Toolkit")]),e._v(" "),r("li",[r("a",{attrs:{href:"http://www.clips.ua.ac.be/pattern",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pattern"),r("OutboundLink")],1),e._v(": web/text mining module")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://radimrehurek.com/gensim/",target:"_blank",rel:"noopener noreferrer"}},[e._v("gensim"),r("OutboundLink")],1),e._v(": Topic modeling")])])])}),[],!1,null,null,null);t.default=o.exports}}]);